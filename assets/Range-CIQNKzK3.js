import{J as C,a as c,w as l,b as e,d as o,e as a,f as t,o as _}from"./index-C_P5UFsA.js";const b={};function x(y,n){const i=o("DocsComponents"),s=o("CCardHeader"),d=o("CFormLabel"),u=o("CFormRange"),r=o("DocsExample"),m=o("CCardBody"),f=o("CCard"),p=o("CCol"),g=o("CRow");return _(),c(g,null,{default:l(()=>[e(p,{xs:12},{default:l(()=>[e(i,{href:"forms/range.html"}),e(f,{class:"mb-4"},{default:l(()=>[e(s,null,{default:l(()=>[...n[0]||(n[0]=[a("strong",null,"Vue Range",-1),t(),a("small",null,null,-1)])]),_:1}),e(m,null,{default:l(()=>[n[2]||(n[2]=a("p",{class:"text-body-secondary small"},[t(" Create custom "),a("code",null,'<input type="range">'),t(" controls with "),a("code",null,"<CFormRange>"),t(". ")],-1)),e(r,{href:"forms/range.html"},{default:l(()=>[e(d,{for:"customRange1"},{default:l(()=>[...n[1]||(n[1]=[t("Example range",-1)])]),_:1}),e(u,{id:"customRange1"})]),_:1})]),_:1})]),_:1})]),_:1}),e(p,{xs:12},{default:l(()=>[e(f,{class:"mb-4"},{default:l(()=>[e(s,null,{default:l(()=>[...n[3]||(n[3]=[a("strong",null,"Vue Range",-1),t(),a("small",null,"Disabled",-1)])]),_:1}),e(m,null,{default:l(()=>[n[5]||(n[5]=a("p",{class:"text-body-secondary small"},[t(" Add the "),a("code",null,"disabled"),t(" boolean attribute on an input to give it a grayed out appearance and remove pointer events. ")],-1)),e(r,{href:"forms/range.html#disabled"},{default:l(()=>[e(d,{for:"disabledRange"},{default:l(()=>[...n[4]||(n[4]=[t("Disabled range",-1)])]),_:1}),e(u,{id:"disabledRange",disabled:""})]),_:1})]),_:1})]),_:1})]),_:1}),e(p,{xs:12},{default:l(()=>[e(f,{class:"mb-4"},{default:l(()=>[e(s,null,{default:l(()=>[...n[6]||(n[6]=[a("strong",null,"Vue Range",-1),t(),a("small",null,"Min and max",-1)])]),_:1}),e(m,null,{default:l(()=>[n[8]||(n[8]=a("p",{class:"text-body-secondary small"},[t(" Range inputs have implicit values for "),a("code",null,"min"),t(" and "),a("code",null,"max"),t("â€” "),a("code",null,"0"),t(" and "),a("code",null,"100"),t(", respectively. You may specify new values for those using the "),a("code",null,"min"),t(" and "),a("code",null,"max"),t(" attributes. ")],-1)),e(r,{href:"forms/range.html#min-and-max"},{default:l(()=>[e(d,{for:"customRange2"},{default:l(()=>[...n[7]||(n[7]=[t("Example range",-1)])]),_:1}),e(u,{id:"customRange2",min:0,max:5,value:3})]),_:1})]),_:1})]),_:1})]),_:1}),e(p,{xs:12},{default:l(()=>[e(f,{class:"mb-4"},{default:l(()=>[e(s,null,{default:l(()=>[...n[9]||(n[9]=[a("strong",null,"Vue Range",-1),t(),a("small",null,"Steps",-1)])]),_:1}),e(m,null,{default:l(()=>[n[11]||(n[11]=a("p",{class:"text-body-secondary small"},[t(' By default, range inputs "snap" to integer values. To change this, you can specify a '),a("code",null,"step"),t(" value. In the example below, we double the number of steps by using "),a("code",null,'step="0.5"'),t(". ")],-1)),e(r,{href:"forms/range.html#steps"},{default:l(()=>[e(d,{for:"customRange3"},{default:l(()=>[...n[10]||(n[10]=[t("Example range",-1)])]),_:1}),e(u,{id:"customRange3",min:0,max:5,step:.5,value:3})]),_:1})]),_:1})]),_:1})]),_:1})]),_:1})}const v=C(b,[["render",x]]);export{v as default};
